<?php


namespace App\Presenters\AdminModule;

use App\Forms\Admin\Social\CreateForm;
use App\Forms\Admin\Social\EditForm;
use App\Model\DynamicRepository;
use App\Model\Security\Auth\Authenticator;
use App\Presenters\AdminBasePresenter;

use Nette\Application\AbortException;
use Nette\Application\UI\Multiplier;
use Nette\Database\Context;
use Nette\Application\UI\Form;

/**
 * Class SocialPresenter
 * @package App\Presenters\AdminModule
 */
class SocialPresenter extends AdminBasePresenter
{
    private DynamicRepository $socialRepository;

    /**
     * SocialPresenter constructor.
     * @param Authenticator $authenticator
     * @param Context $context
     */
    public function __construct(Authenticator $authenticator, Context $context)
    {
        parent::__construct($authenticator);

        $this->socialRepository = new DynamicRepository($context, 'social');
    }

    public function startup()
    {
        parent::startup(); // TODO: Change the autogenerated stub
    }

    public function renderList() {
        $this->template->socials = $this->socialRepository->findAll();
    }

    /**
     * @param $id
     */
    public function renderEdit($id) {
        $this->template->socialId = $id;
    }

    /**
     * @param $id
     * @throws AbortException
     */
    public function actionDelete($id) {
        $deleted = $this->socialRepository->delete("id = ?", $id);
        if($deleted) {
            $this->flashMessage('Sociální síť byla úspěšně odstraněna!', 'success');
        } else {
            $this->flashMessage('Tato služba neexistovala, tudíž nemohla být odstraněna.', 'danger');
        }
        $this->redirect('Social:list');
    }

    public function createComponentCreateForm(): Form {
        return (new CreateForm($this->socialRepository, $this))->create();
    }

    public function createComponentEditForm(): Multiplier {
        return new Multiplier(function(string $id) {
            return (new EditForm($this, $this->socialRepository, $id))->create();
        });
    }
}
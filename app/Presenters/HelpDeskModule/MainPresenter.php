<?php

namespace App\Presenters\HelpDeskModule;

use App\Forms\Panel\Tickets\AddResponseForm;
use App\Model\Panel\Core\TicketRepository;
use App\Model\Security\Auth\SupportAuthenticator;
use App\Model\Security\Exceptions\AuthException;
use App\Model\SettingsRepository;
use App\Presenters\HelpBasePresenter;
use Nette\Application\AbortException;
use App\Model\Security\Form\Captcha;
use Nette\Application\UI\Multiplier;
use Nette\Database\Table\ActiveRow;

/**
 * Class MainPresenter
 * @package App\Presenters\HelpDeskModule
 */
class MainPresenter extends HelpBasePresenter
{
    private SupportAuthenticator $supportAuthenticator;
    private TicketRepository $ticketRepository;

    private ActiveRow $user;

    /**
     * MainPresenter constructor.
     * @param SupportAuthenticator $supportAuthenticator
     * @param SettingsRepository $settingsRepository
     * @param TicketRepository $ticketRepository
     */
    public function __construct(SupportAuthenticator $supportAuthenticator, SettingsRepository $settingsRepository, TicketRepository $ticketRepository)
    {
        parent::__construct($settingsRepository);

        $this->supportAuthenticator = $supportAuthenticator;
        $this->ticketRepository = $ticketRepository;
    }

    /**
     * @throws AbortException
     */
    public function startup()
    {
        parent::startup(); // TODO: Change the autogenerated stub
        $user = $this->supportAuthenticator->getUser();
        if($user) {
            $helper = new \stdClass();
            $helper->authUser = $user;

            $this->template->helper = $helper;
            $this->user = $user;
        } else {
            $this->flashMessage('Před přístupem do helpdesku se musíš přihlásit a podstoupit ověření');
            $this->redirect('Login:main');
        }
    }

    /**
     * @param int $page
     * @throws AbortException
     */
    public function renderHome(int $page = 1) {
        $tickets = $this->ticketRepository->getAllTickets();
        $lastPage = 0;

        $ticketsOffset = $tickets->page($page, 15, $lastPage);
        if($page >! $lastPage) {
            $this->template->page = $page;
            $this->template->lastPage = $lastPage;
            $this->template->tickets = $ticketsOffset;
        } else {
            $this->redirect('Main:home');
        }
    }

    /**
     * @param $id
     */
    public function renderTicket($id) {
        $ticket = $this->ticketRepository->getTicketById($id);
        $this->template->ticket = $ticket;
        $this->template->ticketResponses = $this->ticketRepository->getTicketResponses($id);
        $this->template->responseTypes = $this->ticketRepository::TYPES;
        $captcha = Captcha::getRandomMethod();
        $this->template->captcha = $captcha;
        $this->template->captchaOrder = Captcha::getMethodOrder($captcha);
    }

    /**
     * @throws AbortException
     * @throws AuthException
     */
    public function actionLogout() {
        $this->supportAuthenticator->logout();
        $this->flashMessage('Byl jsi odhlášen, pro další manipulaci s administrací se přihlaš!', 'success');
        $this->redirect('Login:main');
    }

    public function createComponentAddResponseForm() {
        return new Multiplier(function ($methodOrder) { // captcha
            return new Multiplier(function ($ticketId) use ($methodOrder) { // ticket
                return (new AddResponseForm($this,
                    new Captcha(array_keys(Captcha::methods)[$methodOrder]), $this->ticketRepository, $this->user, $ticketId, TicketRepository::TYPES['support']))
                    ->create();
            });
        });
    }
}
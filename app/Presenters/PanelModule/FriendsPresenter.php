<?php


namespace App\Presenters\PanelModule;


use App\Forms\Panel\Friends\AddFriendForm;
use App\Forms\Panel\Friends\RemoveFriendForm;
use App\Model\API\Minecraft;
use App\Model\API\Plugin\FastLogin;
use App\Model\API\Plugin\Friends;
use App\Model\API\Plugin\TokenManager;
use App\Model\Panel\MojangRepository;
use App\Model\Security\PluginAuthenticator;
use App\Model\SettingsRepository;
use App\Presenters\PanelBasePresenter;

use Nette\Application\AbortException;
use Nette\Application\UI\Form;
use Nette\Application\UI\Multiplier;
use Nette\Database\Table\ActiveRow;

/**
 * Class FriendsPresenter
 * @package App\Presenters\PanelModule
 */
class FriendsPresenter extends PanelBasePresenter
{
    private PluginAuthenticator $pluginAuthenticator;
    private FastLogin $fastLogin;
    private MojangRepository $mojangRepository;
    private TokenManager $tokenManager;
    private Friends $friends;

    private ActiveRow $user;

    /**
     * FriendsPresenter constructor.
     * @param SettingsRepository $settingsRepository
     * @param PluginAuthenticator $pluginAuthenticator
     * @param FastLogin $fastLogin
     * @param MojangRepository $mojangRepository
     * @param TokenManager $tokenManager
     * @param Friends $friends
     */
    public function __construct(SettingsRepository $settingsRepository,
                                PluginAuthenticator $pluginAuthenticator,
                                FastLogin $fastLogin,
                                MojangRepository $mojangRepository,
                                TokenManager $tokenManager,
                                Friends $friends)
    {
        parent::__construct($settingsRepository);

        $this->pluginAuthenticator = $pluginAuthenticator;
        $this->fastLogin = $fastLogin;
        $this->tokenManager = $tokenManager;
        $this->mojangRepository = $mojangRepository;
        $this->friends = $friends;
    }

    public function startup()
    {
        parent::startup(); // TODO: Change the autogenerated stub
        $user = $this->pluginAuthenticator->getUser();
        if(!(bool)$user) {
            $this->flashMessage('Pro manipulaci s hráčským panelem, proveďte autorizaci.', 'error');
            $this->redirect('Login:main');
        } else {
            $this->user = $user;
        }
        $this->template->user = $this->user;
    }

    public function renderList() {
        $this->template->friends = $this->friends->getFriends($this->user->realname);
        $this->template->friendsCount = $this->friends->countOfFriends($this->user->realname);
    }

    /**
     * @param $friend
     * @throws AbortException
     */
    public function renderInfo($friend) {
        $friendData = new \stdClass();
        $friendData->row = $this->friends->getRowByName($friend);
        if($friendData->row) {
            if($this->friends->isFriends($this->user->realname, $friendData->row->player_id)) {
                $friendData->name = $friend;
                $friendData->skin = Minecraft::getSkinURL($this->mojangRepository->getUUID($friend));

                $this->template->friend = $friendData;
            } else {
                $this->flashMessage("Hráč {$friend} nepatří mezi tvé přátele.", 'error');
                $this->redirect('Friends:list');
            }
        } else {
            $this->flashMessage("Hráč {$friend} nemůže být tvůj přátel, když na našem serveru nikdy nehrál", 'error');
            $this->redirect('Friends:list');
        }
    }

    /**
     * @return Multiplier
     */
    public function createComponentRemoveFriendForm(): Multiplier {
        return new Multiplier(function ($friendId) {
            return (new RemoveFriendForm($this, $this->friends, [$this->user->realname, $friendId]))->create();
        });
    }

    /**
     * @return Form
     */
    public function createComponentAddFriendForm(): Form {
            return (new AddFriendForm($this, $this->friends, $this->user->realname))->create();
    }
}